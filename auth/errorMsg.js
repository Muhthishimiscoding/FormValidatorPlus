function errorMessages() {
    return {
        
        [Model.RULE_REQUIRED]: 'This field is required.',
        [Model.RULE_EMAIL]: 'Please provide a valid email address.',
        // [Model.RULE_MATCH]: 'This should match with the {match}.',
        [Model.RULE_MIN]: 'The field should contain a minimum of {min} characters.',
        [Model.RULE_MAX]: 'The field should contain a maximum of {max} characters.',
        // [Model.RULE_SPECIAL]: 'This field must contain a special character such as $, #, %, or @.',
        [Model.RULE_NOTSPECIAL]: 'This field should not contain any special characters like $, #, &, @, or >.',
        [Model.RULE_SPACE]: 'This field must contain at least one space.',
        [Model.RULE_NOSPACE]: 'This field should not contain any spaces.',
        [Model.RULE_LOWERCASE]: 'This field should contain lowercase letters.',
        [Model.RULE_UPPERCASE]: 'This field should contain uppercase letters.',
        [Model.RULE_ONLYDIGIT]: 'This field should contain only digits.',
        [Model.RULE_MAXNUMB]: 'This field should not exceed {max} digits.',
        [Model.RULE_MINNUMB]: 'This field should contain at least {min} digits.',
        tillDate: 'The date of this field should be selected before {tillDate}.',
        shouldOld: 'Age Requirement: You must be at least {shouldOld} years old to access this feature/content.',
        fileSize: 'The maximum allowed file size is {fileSize} and your file size is {fileSize2}.',
        fileType: 'The allowed file types are {fileType}',
        image: 'The uploaded file is not a valid image. Allowed image types are {image}.',
        dimension_equal: 'The uploaded image has a width of {givenWidth}px and height of {givenHeight}px, while the required dimensions are {expectedWidth}x{expectedHeight} pixels.',
        dimension_smallest: 'The smallest accepted width and height are {expectedWidth}x{expectedHeight} pixels, but your image is smaller than that, {givenWidth}x{givenHeight}.',
        dimension_highest: 'The largest accepted width and height are {expectedWidth}x{expectedHeight} pixels, but your image is larger than that, {givenWidth}x{givenHeight}.',
        dimension_width: 'The expected width for this image is {width}px.',
        dimension_height: 'The expected height for this image is {height}px.',
        dimension_square: 'This image needs to be a square, meaning it should have the same height and width, like 500x500 pixels.',
        dimension_square_size: 'This image needs to be square with a width and height of {expectedWidth}x{expectedHeight} pixels.',
        dimension_aspectRatio: 'The image must have an aspect ratio of {aspectRatio}.',
        detectMultipleSpaces: 'This has multiple consecutive spaces.',
        accept: 'Please check this checkbox.',
        range: 'The entered number must be between {num1} to {num2}.',
        numb: 'This field needs to be a valid number without any space',
        numb_space: 'This field needs to be a valid number.',
        numb_space_double: 'This field contains more spaces then it should.',
        password: 'This field needs to contain small case, uppercase, special characters i.e $,#,% etc and digits characters and has a length of atleast {password} characters.',
        hasLowerCase: 'The field needs to have a lower case character.',
        hasUpperCase: 'The field needs to have a upper case character.',
        hasSpecial: 'The field needs to have a special character like $, #, @, & etc.',
        hasDigit: 'The field needs to have a numeric digit [0-9].',
        same: 'This field must match with the {same}.',
        inList: 'The field must be of any of these {inList}.',
        url: "Please enter a valid HTTP or HTTPS URL.",
        url_ftp: "Please enter a valid HTTP or HTTPS or FTP URL.",
        zipCode: "Please enter a valid ZIP/Postal code.",
        json: "The provided JSON structure is not valid.",
        ipv4: "Please enter a valid IPv4 address.",
        ipv6: "Please enter a valid IPv6 address.",
        isbn: "Please enter a valid ISBN (ISBN-10 or ISBN-13).",
        upc: "Please enter a valid UPC (Universal Product Code).",
        ean: "Please enter a valid EAN (European Article Number)."
    };
}

"99".replace(searchValue, replaceValue)