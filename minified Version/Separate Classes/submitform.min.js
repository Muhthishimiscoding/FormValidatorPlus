/**
 * @name SubmitForm
 * @author Muhthishim Malik
 * https://github.com/Muhthishimiscoding/FormValidatorPlus
 */
var SubmitForm=class e{static readBlobAsBase64(t,s=1){return new Promise((r,a)=>{let n=new FileReader;s*=1048576;let i=0,o=[];function l(){let e=t.slice(i,i+s);n.readAsDataURL(e),i+=e.size}n.onload=function(s){if(0===o.length?o.push(s.target.result):o.push(s.target.result.split(",")[1]),i<t.size)l();else{let a=o.join("");r({name:t.name,filesize:t.size,type:t.type,lastModified:t.lastModified,base64:a,base64size:e.base64size(a)})}},n.onerror=function(){a(n.error)},l()})}static base64size(e){let t=e.includes(",")?e.split(",")[1]:e,s=t.length,r=0;for(;"="==t[s-r-1];)r++;return 3*s/4-3*r/4}static #a(t,s){if(null!==s.inputs){if(Array.isArray(s.inputs))for(let r of s.inputs)t=e.#b(t,r,s.overwrite);else if("object"==typeof s.inputs)t=e.#b(t,s.inputs,s.overwrite);else throw TypeError(`Object, FormData and arrays are only allowed ${typeof s.inputs} is not allowed.`)}return t}static #b(a,n,i){if(n instanceof FormData)for(let o of new Set(n.keys())){let l=n.getAll(o);a=e.#c(a,o,l,i)}else for(let f of Object.keys(n))a=e.#c(a,f,n[f],i);return a}static #c(c,p,u,y){let w=!("overwritenone"===y||"overwritefiles"===y);if(c=e.overWritedata(c,p,y),"object"==typeof u||Array.isArray(u)||u instanceof FileList)for(let d of u)!c.has(p)||u instanceof File||!w||c.delete(p),c.append(p,d);else c.append(p,u);return c}static selectElem(e,t=HTMLFormElement,s=!1){let r=null;if(e instanceof t?r=e:"string"==typeof e?r=s?$(e):document.querySelector(e):e?.[0] instanceof t&&(r=s?e:e[0]),!(r instanceof t||r?.[0] instanceof t))throw TypeError(`No element in dom exists with this ${e} selector.`);return r}static fileInputs(t){return e.selectElem(t).querySelectorAll('input[type="file"]')}static async selectFiles(t,s=!1){let r={},a=e.fileInputs(t);if(a.length>0){for(let n of a)if(n.files.length>0){let i=n.getAttribute("name");try{if(r[i]=n.files,s){let o=[];for(let l in r){for(let f in r[l])o.push(await e.readBlobAsBase64(f));r[l]=o}}}catch(c){console.error(c)}}}return r}static quickSumbit(t){e.selectElem(t.form).onsubmit=async s=>{s.preventDefault(),await e.justSubmit(t)}}static overWritedata(e,t,s){return"overwritenone"!==s&&("overwriteall"===s&&e.has(t)?e.delete(t):"overwritefiles"===s&&e.has(t)?e.get(t) instanceof File&&e.delete(t):"overwritebutnotfiles"===s&&e.has(t)&&!(e.get(t) instanceof File)&&e.delete(t)),e}static async justSubmit(t){(t={overwrite:"overwriteAll",inputs:null,...t}).overwrite=t.overwrite.toLowerCase();let s={type:"POST",...t.ajaxSettings},r="json"===s?.dataType?.toLowerCase(),a;if(t.form instanceof HTMLFormElement||"string"==typeof t.form){let n=e.selectElem(t.form);a=new FormData(n)}else"object"==typeof t.form&&(a=t.form);if(a instanceof FormData&&(t.hasOwnProperty("resetKeys")&&t.resetKeys.forEach(e=>a.delete(e)),a=e.#a(a,t)),"function"==typeof Validator&&(t.hasOwnProperty("validate")||t.hasOwnProperty("rules"))){if(t.validate instanceof Validator){if(!await Validator.verifyData({data:a},t.validate))return!1}else if(t.hasOwnProperty("validate")&&!await Validator.verifyData({data:a,...t.validate})||!await Validator.verifyData({data:a,rules:t.rules}))return!1}if(r&&(a=await e.objectToJson(a,t.overwrite)),(!s.hasOwnProperty("contentType")||!s.hasOwnProperty("processData"))&&(r?(s.contentType="application/json",s.processData=!1):a instanceof FormData&&(s.contentType=!1,s.processData=!1)),s.data=a,!s.hasOwnProperty("success")&&t.hasOwnProperty("responseElem")){let i,o=!1;"string"==typeof t.responseElem?i=$(t.responseElem):(i=$(t.responseElem.elem),o=t.responseElem.key),s.success=e=>{i.css("display","block"),o?i.html(e[o]):i.html(e)}}$.ajax(s)}static inJson(e,t=!1){if(t){let s={};return e.forEach(e=>{s[e.name]=e.value}),JSON.stringify(s)}return e}static async #d(h,m,v,g){let b=[],_=[];for(let j of v)j instanceof File?b.push(await e.readBlobAsBase64(j)):_.push(j);return b.length>0&&(h[m]=b),_.length>0&&b.length>0?g&&_.length>1?h[`${m}_text`]=_:h[`${m}_text`]=_[_.length-1]:_.length>0&&(h[m]=g?_:_[_.length-1]),h}static async objectToJson(t,s){let r={},a="overwritenone"===s||"overwritefiles"===s;if(t instanceof FormData)for(let n of new Set(t.keys())){let i=t.getAll(n);i.length>1?r=await e.#d(r,n,i,a):i[0]instanceof File?r[n]=await e.readBlobAsBase64(i[0]):r[n]=i[0]}else for(let o in t)t[o]instanceof FileList||Array.isArray(t[o])?r=await e.#d(r,o,inputs,a):t[o]instanceof File?r[o]=await e.readBlobAsBase64(t[o]):r[o]=t[o];return JSON.stringify(r)}};
