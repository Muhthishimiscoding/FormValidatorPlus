/**
 * @name SubmitForm
 * @author Muhthishim Malik
 * https://github.com/Muhthishimiscoding/FormValidatorPlus
 */
!function(e){"object"==typeof module?module.exports=e:window.SubmitForm=e(jQuery)}((function(e){"use strict";return class t{static readBlobAsBase64(e,s=1){return new Promise(((r,o)=>{const n=new FileReader;s=1024*s*1024;let a=0;const i=[];function l(){const t=e.slice(a,a+s);n.readAsDataURL(t),a+=t.size}n.onload=function(s){if(0===i.length?i.push(s.target.result):i.push(s.target.result.split(",")[1]),a<e.size)l();else{const s=i.join("");r({name:e.name,filesize:e.size,type:e.type,lastModified:e.lastModified,base64:s,base64size:t.base64size(s)})}},n.onerror=function(){o(n.error)},l()}))}static base64size(e){const t=e.includes(",")?e.split(",")[1]:e,s=t.length,r=3*s/4;let o=0;for(;"="==t[s-o-1];)o++;return r-3*o/4}static#e(e,s){if(null!==s.inputs)if(Array.isArray(s.inputs))for(const r of s.inputs)e=t.#t(e,r,s.overwrite);else{if("object"!=typeof s.inputs)throw new TypeError(`Object, FormData and arrays are only allowed ${typeof s.inputs} is not allowed.`);e=t.#t(e,s.inputs,s.overwrite)}return e}static#t(e,s,r){if(s instanceof FormData)for(const o of new Set(s.keys())){let n=s.getAll(o);e=t.#s(e,o,n,r)}else for(const o of Object.keys(s))e=t.#s(e,o,s[o],r);return e}static#s(e,s,r,o){let n=!("overwritenone"===o||"overwritefiles"===o);if(e=t.overWritedata(e,s,o),"object"==typeof r||Array.isArray(r)||r instanceof FileList)for(const t of r)!e.has(s)||r instanceof File||!n||e.delete(s),e.append(s,t);else e.append(s,r);return e}static selectElem(t,s=HTMLFormElement,r=!1){let o=null;if(t instanceof s?o=t:"string"==typeof t?o=r?e(t):document.querySelector(t):t?.[0]instanceof s&&(o=r?t:t[0]),!(o instanceof s||o?.[0]instanceof s))throw new TypeError(`No element in dom exists with this ${t} selector.`);return o}static fileInputs(e){return t.selectElem(e).querySelectorAll('input[type="file"]')}static async selectFiles(e,s=!1){let r={},o=t.fileInputs(e);if(o.length>0)for(const e of o)if(e.files.length>0){let o=e.getAttribute("name");try{if(r[o]=e.files,s){let e=[];for(const s in r){for(const o in r[s])e.push(await t.readBlobAsBase64(o));r[s]=e}}}catch(e){console.error(e)}}return r}static quickSubmit(e){t.selectElem(e.form).onsubmit=async s=>{s.preventDefault(),await t.justSubmit(e)}}static overWritedata(e,t,s){return"overwritenone"!==s&&("overwriteall"===s&&e.has(t)?e.delete(t):"overwritefiles"===s&&e.has(t)?e.get(t)instanceof File&&e.delete(t):"overwritebutnotfiles"===s&&e.has(t)&&(e.get(t)instanceof File||e.delete(t))),e}static async justSubmit(s){(s={overwrite:"overwriteAll",inputs:null,...s}).overwrite=s.overwrite.toLowerCase();let r,o={type:"POST",...s.ajaxSettings},n="json"===o?.dataType?.toLowerCase();if(s.form instanceof HTMLFormElement||"string"==typeof s.form){let e=t.selectElem(s.form);r=new FormData(e)}else"object"==typeof s.form&&(r=s.form);if(r instanceof FormData&&(s.hasOwnProperty("resetKeys")&&s.resetKeys.forEach((e=>r.delete(e))),r=t.#e(r,s)),"function"==typeof Validator&&(s.hasOwnProperty("validate")||s.hasOwnProperty("rules")))if(s.validate instanceof Validator){if(!await Validator.verifyData({data:r},s.validate))return!1}else{if(s.hasOwnProperty("validate")&&!await Validator.verifyData({data:r,...s.validate}))return!1;if(!await Validator.verifyData({data:r,rules:s.rules}))return!1}if(n&&(r=await t.objectToJson(r,s.overwrite)),o.hasOwnProperty("contentType")&&o.hasOwnProperty("processData")||(n?(o.contentType="application/json",o.processData=!1):r instanceof FormData&&(o.contentType=!1,o.processData=!1)),o.data=r,!o.hasOwnProperty("success")&&s.hasOwnProperty("responseElem")){let t,r=!1;"string"==typeof s.responseElem?t=e(s.responseElem):(t=e(s.responseElem.elem),r=s.responseElem.key),o.success=e=>{t.css("display","block"),r?t.html(e[r]):t.html(e)}}e.ajax(o)}static inJson(e,t=!1){if(t){let t={};return e.forEach((e=>{t[e.name]=e.value})),JSON.stringify(t)}return e}static async#r(e,s,r,o){const n=[],a=[];for(const e of r)e instanceof File?n.push(await t.readBlobAsBase64(e)):a.push(e);return n.length>0&&(e[s]=n),a.length>0&&n.length>0?o&&a.length>1?e[`${s}_text`]=a:e[`${s}_text`]=a[a.length-1]:a.length>0&&(e[s]=o?a:a[a.length-1]),e}static async objectToJson(e,s){let r={};const o="overwritenone"===s||"overwritefiles"===s;if(e instanceof FormData)for(let s of new Set(e.keys())){let n=e.getAll(s);n.length>1?r=await t.#r(r,s,n,o):n[0]instanceof File?r[s]=await t.readBlobAsBase64(n[0]):r[s]=n[0]}else for(let s in e)e[s]instanceof FileList||Array.isArray(e[s])?r=await t.#r(r,s,inputs,o):e[s]instanceof File?r[s]=await t.readBlobAsBase64(e[s]):r[s]=e[s];return JSON.stringify(r)}}}));